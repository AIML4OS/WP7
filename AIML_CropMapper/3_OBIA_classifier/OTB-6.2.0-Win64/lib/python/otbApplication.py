# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_otbApplication')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_otbApplication')
    _otbApplication = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_otbApplication', [dirname(__file__)])
        except ImportError:
            import _otbApplication
            return _otbApplication
        if fp is not None:
            try:
                _mod = imp.load_module('_otbApplication', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _otbApplication = swig_import_helper()
    del swig_import_helper
else:
    import _otbApplication
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _otbApplication.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _otbApplication.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _otbApplication.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _otbApplication.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _otbApplication.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _otbApplication.SwigPyIterator_equal(self, x)

    def copy(self):
        return _otbApplication.SwigPyIterator_copy(self)

    def next(self):
        return _otbApplication.SwigPyIterator_next(self)

    def __next__(self):
        return _otbApplication.SwigPyIterator___next__(self)

    def previous(self):
        return _otbApplication.SwigPyIterator_previous(self)

    def advance(self, n):
        return _otbApplication.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _otbApplication.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _otbApplication.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _otbApplication.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _otbApplication.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _otbApplication.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _otbApplication.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _otbApplication.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class vectorstring(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorstring, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorstring, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _otbApplication.vectorstring_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _otbApplication.vectorstring___nonzero__(self)

    def __bool__(self):
        return _otbApplication.vectorstring___bool__(self)

    def __len__(self):
        return _otbApplication.vectorstring___len__(self)

    def __getslice__(self, i, j):
        return _otbApplication.vectorstring___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _otbApplication.vectorstring___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _otbApplication.vectorstring___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _otbApplication.vectorstring___delitem__(self, *args)

    def __getitem__(self, *args):
        return _otbApplication.vectorstring___getitem__(self, *args)

    def __setitem__(self, *args):
        return _otbApplication.vectorstring___setitem__(self, *args)

    def pop(self):
        return _otbApplication.vectorstring_pop(self)

    def append(self, x):
        return _otbApplication.vectorstring_append(self, x)

    def empty(self):
        return _otbApplication.vectorstring_empty(self)

    def size(self):
        return _otbApplication.vectorstring_size(self)

    def swap(self, v):
        return _otbApplication.vectorstring_swap(self, v)

    def begin(self):
        return _otbApplication.vectorstring_begin(self)

    def end(self):
        return _otbApplication.vectorstring_end(self)

    def rbegin(self):
        return _otbApplication.vectorstring_rbegin(self)

    def rend(self):
        return _otbApplication.vectorstring_rend(self)

    def clear(self):
        return _otbApplication.vectorstring_clear(self)

    def get_allocator(self):
        return _otbApplication.vectorstring_get_allocator(self)

    def pop_back(self):
        return _otbApplication.vectorstring_pop_back(self)

    def erase(self, *args):
        return _otbApplication.vectorstring_erase(self, *args)

    def __init__(self, *args):
        this = _otbApplication.new_vectorstring(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _otbApplication.vectorstring_push_back(self, x)

    def front(self):
        return _otbApplication.vectorstring_front(self)

    def back(self):
        return _otbApplication.vectorstring_back(self)

    def assign(self, n, x):
        return _otbApplication.vectorstring_assign(self, n, x)

    def resize(self, *args):
        return _otbApplication.vectorstring_resize(self, *args)

    def insert(self, *args):
        return _otbApplication.vectorstring_insert(self, *args)

    def reserve(self, n):
        return _otbApplication.vectorstring_reserve(self, n)

    def capacity(self):
        return _otbApplication.vectorstring_capacity(self)
    __swig_destroy__ = _otbApplication.delete_vectorstring
    __del__ = lambda self: None
vectorstring_swigregister = _otbApplication.vectorstring_swigregister
vectorstring_swigregister(vectorstring)

class itkIndent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, itkIndent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, itkIndent, name)
    __repr__ = _swig_repr
    if _newclass:
        New = staticmethod(_otbApplication.itkIndent_New)
    else:
        New = _otbApplication.itkIndent_New

    def __init__(self, ind=0):
        this = _otbApplication.new_itkIndent(ind)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        GetNameOfClass = staticmethod(_otbApplication.itkIndent_GetNameOfClass)
    else:
        GetNameOfClass = _otbApplication.itkIndent_GetNameOfClass

    def GetNextIndent(self):
        return _otbApplication.itkIndent_GetNextIndent(self)
    __swig_destroy__ = _otbApplication.delete_itkIndent
    __del__ = lambda self: None
itkIndent_swigregister = _otbApplication.itkIndent_swigregister
itkIndent_swigregister(itkIndent)

def itkIndent_New():
    return _otbApplication.itkIndent_New()
itkIndent_New = _otbApplication.itkIndent_New

def itkIndent_GetNameOfClass():
    return _otbApplication.itkIndent_GetNameOfClass()
itkIndent_GetNameOfClass = _otbApplication.itkIndent_GetNameOfClass

class itkLightObject(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, itkLightObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, itkLightObject, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        New = staticmethod(_otbApplication.itkLightObject_New)
    else:
        New = _otbApplication.itkLightObject_New

    def GetNameOfClass(self):
        return _otbApplication.itkLightObject_GetNameOfClass(self)

    def Print(self, os, indent=0):
        return _otbApplication.itkLightObject_Print(self, os, indent)
    if _newclass:
        BreakOnError = staticmethod(_otbApplication.itkLightObject_BreakOnError)
    else:
        BreakOnError = _otbApplication.itkLightObject_BreakOnError

    def ToString(self):
        return _otbApplication.itkLightObject_ToString(self)

    def __str__( self ):
      return self.ToString()

    __swig_destroy__ = _otbApplication.delete_itkLightObject
    __del__ = lambda self: None
itkLightObject_swigregister = _otbApplication.itkLightObject_swigregister
itkLightObject_swigregister(itkLightObject)

def itkLightObject_New():
    return _otbApplication.itkLightObject_New()
itkLightObject_New = _otbApplication.itkLightObject_New

def itkLightObject_BreakOnError():
    return _otbApplication.itkLightObject_BreakOnError()
itkLightObject_BreakOnError = _otbApplication.itkLightObject_BreakOnError

class itkLightObject_Pointer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, itkLightObject_Pointer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, itkLightObject_Pointer, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _otbApplication.new_itkLightObject_Pointer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _otbApplication.delete_itkLightObject_Pointer
    __del__ = lambda self: None

    def __deref__(self):
        return _otbApplication.itkLightObject_Pointer___deref__(self)

    def IsNotNull(self):
        return _otbApplication.itkLightObject_Pointer_IsNotNull(self)

    def IsNull(self):
        return _otbApplication.itkLightObject_Pointer_IsNull(self)

    def GetPointer(self):
        return _otbApplication.itkLightObject_Pointer_GetPointer(self)

    def New(self):
        return _otbApplication.itkLightObject_Pointer_New(self)

    def GetNameOfClass(self):
        return _otbApplication.itkLightObject_Pointer_GetNameOfClass(self)

    def Print(self, os, indent=0):
        return _otbApplication.itkLightObject_Pointer_Print(self, os, indent)

    def BreakOnError(self):
        return _otbApplication.itkLightObject_Pointer_BreakOnError(self)

    def ToString(self):
        return _otbApplication.itkLightObject_Pointer_ToString(self)
itkLightObject_Pointer_swigregister = _otbApplication.itkLightObject_Pointer_swigregister
itkLightObject_Pointer_swigregister(itkLightObject_Pointer)

class itkObject(itkLightObject):
    __swig_setmethods__ = {}
    for _s in [itkLightObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, itkObject, name, value)
    __swig_getmethods__ = {}
    for _s in [itkLightObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, itkObject, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        New = staticmethod(_otbApplication.itkObject_New)
    else:
        New = _otbApplication.itkObject_New

    def GetNameOfClass(self):
        return _otbApplication.itkObject_GetNameOfClass(self)

    def AddObserver(self, event, arg1):
        return _otbApplication.itkObject_AddObserver(self, event, arg1)

    def GetCommand(self, tag):
        return _otbApplication.itkObject_GetCommand(self, tag)

    def InvokeEvent(self, arg0):
        return _otbApplication.itkObject_InvokeEvent(self, arg0)

    def RemoveObserver(self, tag):
        return _otbApplication.itkObject_RemoveObserver(self, tag)

    def RemoveAllObservers(self):
        return _otbApplication.itkObject_RemoveAllObservers(self)

    def HasObserver(self, event):
        return _otbApplication.itkObject_HasObserver(self, event)

    def GetMetaDataDictionary(self):
        return _otbApplication.itkObject_GetMetaDataDictionary(self)

    def SetMetaDataDictionary(self, rhs):
        return _otbApplication.itkObject_SetMetaDataDictionary(self, rhs)
    __swig_destroy__ = _otbApplication.delete_itkObject
    __del__ = lambda self: None
itkObject_swigregister = _otbApplication.itkObject_swigregister
itkObject_swigregister(itkObject)

def itkObject_New():
    return _otbApplication.itkObject_New()
itkObject_New = _otbApplication.itkObject_New

class itkObject_Pointer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, itkObject_Pointer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, itkObject_Pointer, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _otbApplication.new_itkObject_Pointer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _otbApplication.delete_itkObject_Pointer
    __del__ = lambda self: None

    def __deref__(self):
        return _otbApplication.itkObject_Pointer___deref__(self)

    def IsNotNull(self):
        return _otbApplication.itkObject_Pointer_IsNotNull(self)

    def IsNull(self):
        return _otbApplication.itkObject_Pointer_IsNull(self)

    def GetPointer(self):
        return _otbApplication.itkObject_Pointer_GetPointer(self)

    def New(self):
        return _otbApplication.itkObject_Pointer_New(self)

    def GetNameOfClass(self):
        return _otbApplication.itkObject_Pointer_GetNameOfClass(self)

    def AddObserver(self, event, arg1):
        return _otbApplication.itkObject_Pointer_AddObserver(self, event, arg1)

    def GetCommand(self, tag):
        return _otbApplication.itkObject_Pointer_GetCommand(self, tag)

    def InvokeEvent(self, arg0):
        return _otbApplication.itkObject_Pointer_InvokeEvent(self, arg0)

    def RemoveObserver(self, tag):
        return _otbApplication.itkObject_Pointer_RemoveObserver(self, tag)

    def RemoveAllObservers(self):
        return _otbApplication.itkObject_Pointer_RemoveAllObservers(self)

    def HasObserver(self, event):
        return _otbApplication.itkObject_Pointer_HasObserver(self, event)

    def GetMetaDataDictionary(self):
        return _otbApplication.itkObject_Pointer_GetMetaDataDictionary(self)

    def SetMetaDataDictionary(self, rhs):
        return _otbApplication.itkObject_Pointer_SetMetaDataDictionary(self, rhs)

    def Print(self, os, indent=0):
        return _otbApplication.itkObject_Pointer_Print(self, os, indent)

    def BreakOnError(self):
        return _otbApplication.itkObject_Pointer_BreakOnError(self)

    def ToString(self):
        return _otbApplication.itkObject_Pointer_ToString(self)
itkObject_Pointer_swigregister = _otbApplication.itkObject_Pointer_swigregister
itkObject_Pointer_swigregister(itkObject_Pointer)

class itkProcessObject(itkObject):
    __swig_setmethods__ = {}
    for _s in [itkObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, itkProcessObject, name, value)
    __swig_getmethods__ = {}
    for _s in [itkObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, itkProcessObject, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetProgress(self):
        return _otbApplication.itkProcessObject_GetProgress(self)
    __swig_destroy__ = _otbApplication.delete_itkProcessObject
    __del__ = lambda self: None
itkProcessObject_swigregister = _otbApplication.itkProcessObject_swigregister
itkProcessObject_swigregister(itkProcessObject)

class itkProcessObject_Pointer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, itkProcessObject_Pointer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, itkProcessObject_Pointer, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _otbApplication.new_itkProcessObject_Pointer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _otbApplication.delete_itkProcessObject_Pointer
    __del__ = lambda self: None

    def __deref__(self):
        return _otbApplication.itkProcessObject_Pointer___deref__(self)

    def IsNotNull(self):
        return _otbApplication.itkProcessObject_Pointer_IsNotNull(self)

    def IsNull(self):
        return _otbApplication.itkProcessObject_Pointer_IsNull(self)

    def GetPointer(self):
        return _otbApplication.itkProcessObject_Pointer_GetPointer(self)

    def GetProgress(self):
        return _otbApplication.itkProcessObject_Pointer_GetProgress(self)

    def New(self):
        return _otbApplication.itkProcessObject_Pointer_New(self)

    def GetNameOfClass(self):
        return _otbApplication.itkProcessObject_Pointer_GetNameOfClass(self)

    def AddObserver(self, event, arg1):
        return _otbApplication.itkProcessObject_Pointer_AddObserver(self, event, arg1)

    def GetCommand(self, tag):
        return _otbApplication.itkProcessObject_Pointer_GetCommand(self, tag)

    def InvokeEvent(self, arg0):
        return _otbApplication.itkProcessObject_Pointer_InvokeEvent(self, arg0)

    def RemoveObserver(self, tag):
        return _otbApplication.itkProcessObject_Pointer_RemoveObserver(self, tag)

    def RemoveAllObservers(self):
        return _otbApplication.itkProcessObject_Pointer_RemoveAllObservers(self)

    def HasObserver(self, event):
        return _otbApplication.itkProcessObject_Pointer_HasObserver(self, event)

    def GetMetaDataDictionary(self):
        return _otbApplication.itkProcessObject_Pointer_GetMetaDataDictionary(self)

    def SetMetaDataDictionary(self, rhs):
        return _otbApplication.itkProcessObject_Pointer_SetMetaDataDictionary(self, rhs)

    def Print(self, os, indent=0):
        return _otbApplication.itkProcessObject_Pointer_Print(self, os, indent)

    def BreakOnError(self):
        return _otbApplication.itkProcessObject_Pointer_BreakOnError(self)

    def ToString(self):
        return _otbApplication.itkProcessObject_Pointer_ToString(self)
itkProcessObject_Pointer_swigregister = _otbApplication.itkProcessObject_Pointer_swigregister
itkProcessObject_Pointer_swigregister(itkProcessObject_Pointer)

class itkObjectFactoryBase(itkObject):
    __swig_setmethods__ = {}
    for _s in [itkObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, itkObjectFactoryBase, name, value)
    __swig_getmethods__ = {}
    for _s in [itkObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, itkObjectFactoryBase, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetNameOfClass(self):
        return _otbApplication.itkObjectFactoryBase_GetNameOfClass(self)
    if _newclass:
        CreateInstance = staticmethod(_otbApplication.itkObjectFactoryBase_CreateInstance)
    else:
        CreateInstance = _otbApplication.itkObjectFactoryBase_CreateInstance
    if _newclass:
        CreateAllInstance = staticmethod(_otbApplication.itkObjectFactoryBase_CreateAllInstance)
    else:
        CreateAllInstance = _otbApplication.itkObjectFactoryBase_CreateAllInstance
    if _newclass:
        ReHash = staticmethod(_otbApplication.itkObjectFactoryBase_ReHash)
    else:
        ReHash = _otbApplication.itkObjectFactoryBase_ReHash
    if _newclass:
        RegisterFactory = staticmethod(_otbApplication.itkObjectFactoryBase_RegisterFactory)
    else:
        RegisterFactory = _otbApplication.itkObjectFactoryBase_RegisterFactory
    if _newclass:
        UnRegisterFactory = staticmethod(_otbApplication.itkObjectFactoryBase_UnRegisterFactory)
    else:
        UnRegisterFactory = _otbApplication.itkObjectFactoryBase_UnRegisterFactory
    if _newclass:
        UnRegisterAllFactories = staticmethod(_otbApplication.itkObjectFactoryBase_UnRegisterAllFactories)
    else:
        UnRegisterAllFactories = _otbApplication.itkObjectFactoryBase_UnRegisterAllFactories
    if _newclass:
        GetRegisteredFactories = staticmethod(_otbApplication.itkObjectFactoryBase_GetRegisteredFactories)
    else:
        GetRegisteredFactories = _otbApplication.itkObjectFactoryBase_GetRegisteredFactories

    def GetITKSourceVersion(self):
        return _otbApplication.itkObjectFactoryBase_GetITKSourceVersion(self)

    def GetDescription(self):
        return _otbApplication.itkObjectFactoryBase_GetDescription(self)

    def GetClassOverrideNames(self):
        return _otbApplication.itkObjectFactoryBase_GetClassOverrideNames(self)

    def GetClassOverrideWithNames(self):
        return _otbApplication.itkObjectFactoryBase_GetClassOverrideWithNames(self)

    def GetClassOverrideDescriptions(self):
        return _otbApplication.itkObjectFactoryBase_GetClassOverrideDescriptions(self)

    def GetEnableFlags(self):
        return _otbApplication.itkObjectFactoryBase_GetEnableFlags(self)

    def SetEnableFlag(self, flag, className, subclassName):
        return _otbApplication.itkObjectFactoryBase_SetEnableFlag(self, flag, className, subclassName)

    def GetEnableFlag(self, className, subclassName):
        return _otbApplication.itkObjectFactoryBase_GetEnableFlag(self, className, subclassName)

    def Disable(self, className):
        return _otbApplication.itkObjectFactoryBase_Disable(self, className)

    def GetLibraryPath(self):
        return _otbApplication.itkObjectFactoryBase_GetLibraryPath(self)
    __swig_destroy__ = _otbApplication.delete_itkObjectFactoryBase
    __del__ = lambda self: None
itkObjectFactoryBase_swigregister = _otbApplication.itkObjectFactoryBase_swigregister
itkObjectFactoryBase_swigregister(itkObjectFactoryBase)

def itkObjectFactoryBase_CreateInstance(itkclassname):
    return _otbApplication.itkObjectFactoryBase_CreateInstance(itkclassname)
itkObjectFactoryBase_CreateInstance = _otbApplication.itkObjectFactoryBase_CreateInstance

def itkObjectFactoryBase_CreateAllInstance(itkclassname):
    return _otbApplication.itkObjectFactoryBase_CreateAllInstance(itkclassname)
itkObjectFactoryBase_CreateAllInstance = _otbApplication.itkObjectFactoryBase_CreateAllInstance

def itkObjectFactoryBase_ReHash():
    return _otbApplication.itkObjectFactoryBase_ReHash()
itkObjectFactoryBase_ReHash = _otbApplication.itkObjectFactoryBase_ReHash

def itkObjectFactoryBase_RegisterFactory(arg0):
    return _otbApplication.itkObjectFactoryBase_RegisterFactory(arg0)
itkObjectFactoryBase_RegisterFactory = _otbApplication.itkObjectFactoryBase_RegisterFactory

def itkObjectFactoryBase_UnRegisterFactory(arg0):
    return _otbApplication.itkObjectFactoryBase_UnRegisterFactory(arg0)
itkObjectFactoryBase_UnRegisterFactory = _otbApplication.itkObjectFactoryBase_UnRegisterFactory

def itkObjectFactoryBase_UnRegisterAllFactories():
    return _otbApplication.itkObjectFactoryBase_UnRegisterAllFactories()
itkObjectFactoryBase_UnRegisterAllFactories = _otbApplication.itkObjectFactoryBase_UnRegisterAllFactories

def itkObjectFactoryBase_GetRegisteredFactories():
    return _otbApplication.itkObjectFactoryBase_GetRegisteredFactories()
itkObjectFactoryBase_GetRegisteredFactories = _otbApplication.itkObjectFactoryBase_GetRegisteredFactories

class itkObjectFactoryBase_Pointer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, itkObjectFactoryBase_Pointer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, itkObjectFactoryBase_Pointer, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _otbApplication.new_itkObjectFactoryBase_Pointer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _otbApplication.delete_itkObjectFactoryBase_Pointer
    __del__ = lambda self: None

    def __deref__(self):
        return _otbApplication.itkObjectFactoryBase_Pointer___deref__(self)

    def IsNotNull(self):
        return _otbApplication.itkObjectFactoryBase_Pointer_IsNotNull(self)

    def IsNull(self):
        return _otbApplication.itkObjectFactoryBase_Pointer_IsNull(self)

    def GetPointer(self):
        return _otbApplication.itkObjectFactoryBase_Pointer_GetPointer(self)

    def GetNameOfClass(self):
        return _otbApplication.itkObjectFactoryBase_Pointer_GetNameOfClass(self)

    def CreateInstance(self, itkclassname):
        return _otbApplication.itkObjectFactoryBase_Pointer_CreateInstance(self, itkclassname)

    def CreateAllInstance(self, itkclassname):
        return _otbApplication.itkObjectFactoryBase_Pointer_CreateAllInstance(self, itkclassname)

    def ReHash(self):
        return _otbApplication.itkObjectFactoryBase_Pointer_ReHash(self)

    def RegisterFactory(self, arg0):
        return _otbApplication.itkObjectFactoryBase_Pointer_RegisterFactory(self, arg0)

    def UnRegisterFactory(self, arg0):
        return _otbApplication.itkObjectFactoryBase_Pointer_UnRegisterFactory(self, arg0)

    def UnRegisterAllFactories(self):
        return _otbApplication.itkObjectFactoryBase_Pointer_UnRegisterAllFactories(self)

    def GetRegisteredFactories(self):
        return _otbApplication.itkObjectFactoryBase_Pointer_GetRegisteredFactories(self)

    def GetITKSourceVersion(self):
        return _otbApplication.itkObjectFactoryBase_Pointer_GetITKSourceVersion(self)

    def GetDescription(self):
        return _otbApplication.itkObjectFactoryBase_Pointer_GetDescription(self)

    def GetClassOverrideNames(self):
        return _otbApplication.itkObjectFactoryBase_Pointer_GetClassOverrideNames(self)

    def GetClassOverrideWithNames(self):
        return _otbApplication.itkObjectFactoryBase_Pointer_GetClassOverrideWithNames(self)

    def GetClassOverrideDescriptions(self):
        return _otbApplication.itkObjectFactoryBase_Pointer_GetClassOverrideDescriptions(self)

    def GetEnableFlags(self):
        return _otbApplication.itkObjectFactoryBase_Pointer_GetEnableFlags(self)

    def SetEnableFlag(self, flag, className, subclassName):
        return _otbApplication.itkObjectFactoryBase_Pointer_SetEnableFlag(self, flag, className, subclassName)

    def GetEnableFlag(self, className, subclassName):
        return _otbApplication.itkObjectFactoryBase_Pointer_GetEnableFlag(self, className, subclassName)

    def Disable(self, className):
        return _otbApplication.itkObjectFactoryBase_Pointer_Disable(self, className)

    def GetLibraryPath(self):
        return _otbApplication.itkObjectFactoryBase_Pointer_GetLibraryPath(self)

    def New(self):
        return _otbApplication.itkObjectFactoryBase_Pointer_New(self)

    def AddObserver(self, event, arg1):
        return _otbApplication.itkObjectFactoryBase_Pointer_AddObserver(self, event, arg1)

    def GetCommand(self, tag):
        return _otbApplication.itkObjectFactoryBase_Pointer_GetCommand(self, tag)

    def InvokeEvent(self, arg0):
        return _otbApplication.itkObjectFactoryBase_Pointer_InvokeEvent(self, arg0)

    def RemoveObserver(self, tag):
        return _otbApplication.itkObjectFactoryBase_Pointer_RemoveObserver(self, tag)

    def RemoveAllObservers(self):
        return _otbApplication.itkObjectFactoryBase_Pointer_RemoveAllObservers(self)

    def HasObserver(self, event):
        return _otbApplication.itkObjectFactoryBase_Pointer_HasObserver(self, event)

    def GetMetaDataDictionary(self):
        return _otbApplication.itkObjectFactoryBase_Pointer_GetMetaDataDictionary(self)

    def SetMetaDataDictionary(self, rhs):
        return _otbApplication.itkObjectFactoryBase_Pointer_SetMetaDataDictionary(self, rhs)

    def Print(self, os, indent=0):
        return _otbApplication.itkObjectFactoryBase_Pointer_Print(self, os, indent)

    def BreakOnError(self):
        return _otbApplication.itkObjectFactoryBase_Pointer_BreakOnError(self)

    def ToString(self):
        return _otbApplication.itkObjectFactoryBase_Pointer_ToString(self)
itkObjectFactoryBase_Pointer_swigregister = _otbApplication.itkObjectFactoryBase_Pointer_swigregister
itkObjectFactoryBase_Pointer_swigregister(itkObjectFactoryBase_Pointer)

class itkMetaDataDictionary(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, itkMetaDataDictionary, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, itkMetaDataDictionary, name)
    __repr__ = _swig_repr

    def Print(self, os):
        return _otbApplication.itkMetaDataDictionary_Print(self, os)

    def __init__(self, *args):
        this = _otbApplication.new_itkMetaDataDictionary(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _otbApplication.delete_itkMetaDataDictionary
    __del__ = lambda self: None

    def GetKeys(self):
        return _otbApplication.itkMetaDataDictionary_GetKeys(self)

    def HasKey(self, arg0):
        return _otbApplication.itkMetaDataDictionary_HasKey(self, arg0)
itkMetaDataDictionary_swigregister = _otbApplication.itkMetaDataDictionary_swigregister
itkMetaDataDictionary_swigregister(itkMetaDataDictionary)

class itkCommand(itkObject):
    __swig_setmethods__ = {}
    for _s in [itkObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, itkCommand, name, value)
    __swig_getmethods__ = {}
    for _s in [itkObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, itkCommand, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetNameOfClass(self):
        return _otbApplication.itkCommand_GetNameOfClass(self)

    def Execute(self, caller, event):
        return _otbApplication.itkCommand_Execute(self, caller, event)
    __swig_destroy__ = _otbApplication.delete_itkCommand
    __del__ = lambda self: None
itkCommand_swigregister = _otbApplication.itkCommand_swigregister
itkCommand_swigregister(itkCommand)

class itkCommand_Pointer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, itkCommand_Pointer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, itkCommand_Pointer, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _otbApplication.new_itkCommand_Pointer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _otbApplication.delete_itkCommand_Pointer
    __del__ = lambda self: None

    def __deref__(self):
        return _otbApplication.itkCommand_Pointer___deref__(self)

    def IsNotNull(self):
        return _otbApplication.itkCommand_Pointer_IsNotNull(self)

    def IsNull(self):
        return _otbApplication.itkCommand_Pointer_IsNull(self)

    def GetPointer(self):
        return _otbApplication.itkCommand_Pointer_GetPointer(self)

    def GetNameOfClass(self):
        return _otbApplication.itkCommand_Pointer_GetNameOfClass(self)

    def Execute(self, caller, event):
        return _otbApplication.itkCommand_Pointer_Execute(self, caller, event)

    def New(self):
        return _otbApplication.itkCommand_Pointer_New(self)

    def AddObserver(self, event, arg1):
        return _otbApplication.itkCommand_Pointer_AddObserver(self, event, arg1)

    def GetCommand(self, tag):
        return _otbApplication.itkCommand_Pointer_GetCommand(self, tag)

    def InvokeEvent(self, arg0):
        return _otbApplication.itkCommand_Pointer_InvokeEvent(self, arg0)

    def RemoveObserver(self, tag):
        return _otbApplication.itkCommand_Pointer_RemoveObserver(self, tag)

    def RemoveAllObservers(self):
        return _otbApplication.itkCommand_Pointer_RemoveAllObservers(self)

    def HasObserver(self, event):
        return _otbApplication.itkCommand_Pointer_HasObserver(self, event)

    def GetMetaDataDictionary(self):
        return _otbApplication.itkCommand_Pointer_GetMetaDataDictionary(self)

    def SetMetaDataDictionary(self, rhs):
        return _otbApplication.itkCommand_Pointer_SetMetaDataDictionary(self, rhs)

    def Print(self, os, indent=0):
        return _otbApplication.itkCommand_Pointer_Print(self, os, indent)

    def BreakOnError(self):
        return _otbApplication.itkCommand_Pointer_BreakOnError(self)

    def ToString(self):
        return _otbApplication.itkCommand_Pointer_ToString(self)
itkCommand_Pointer_swigregister = _otbApplication.itkCommand_Pointer_swigregister
itkCommand_Pointer_swigregister(itkCommand_Pointer)

class itkEventObject(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, itkEventObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, itkEventObject, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _otbApplication.delete_itkEventObject
    __del__ = lambda self: None

    def MakeObject(self):
        return _otbApplication.itkEventObject_MakeObject(self)

    def Print(self, os):
        return _otbApplication.itkEventObject_Print(self, os)

    def GetEventName(self):
        return _otbApplication.itkEventObject_GetEventName(self)

    def CheckEvent(self, arg0):
        return _otbApplication.itkEventObject_CheckEvent(self, arg0)
itkEventObject_swigregister = _otbApplication.itkEventObject_swigregister
itkEventObject_swigregister(itkEventObject)

class itkNoEvent(itkEventObject):
    __swig_setmethods__ = {}
    for _s in [itkEventObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, itkNoEvent, name, value)
    __swig_getmethods__ = {}
    for _s in [itkEventObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, itkNoEvent, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _otbApplication.delete_itkNoEvent
    __del__ = lambda self: None

    def GetEventName(self):
        return _otbApplication.itkNoEvent_GetEventName(self)

    def CheckEvent(self, e):
        return _otbApplication.itkNoEvent_CheckEvent(self, e)

    def MakeObject(self):
        return _otbApplication.itkNoEvent_MakeObject(self)

    def __init__(self, *args):
        this = _otbApplication.new_itkNoEvent(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
itkNoEvent_swigregister = _otbApplication.itkNoEvent_swigregister
itkNoEvent_swigregister(itkNoEvent)

class itkAnyEvent(itkEventObject):
    __swig_setmethods__ = {}
    for _s in [itkEventObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, itkAnyEvent, name, value)
    __swig_getmethods__ = {}
    for _s in [itkEventObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, itkAnyEvent, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _otbApplication.delete_itkAnyEvent
    __del__ = lambda self: None

    def GetEventName(self):
        return _otbApplication.itkAnyEvent_GetEventName(self)

    def CheckEvent(self, e):
        return _otbApplication.itkAnyEvent_CheckEvent(self, e)

    def MakeObject(self):
        return _otbApplication.itkAnyEvent_MakeObject(self)

    def __init__(self, *args):
        this = _otbApplication.new_itkAnyEvent(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
itkAnyEvent_swigregister = _otbApplication.itkAnyEvent_swigregister
itkAnyEvent_swigregister(itkAnyEvent)

class itkDeleteEvent(itkAnyEvent):
    __swig_setmethods__ = {}
    for _s in [itkAnyEvent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, itkDeleteEvent, name, value)
    __swig_getmethods__ = {}
    for _s in [itkAnyEvent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, itkDeleteEvent, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _otbApplication.delete_itkDeleteEvent
    __del__ = lambda self: None

    def GetEventName(self):
        return _otbApplication.itkDeleteEvent_GetEventName(self)

    def CheckEvent(self, e):
        return _otbApplication.itkDeleteEvent_CheckEvent(self, e)

    def MakeObject(self):
        return _otbApplication.itkDeleteEvent_MakeObject(self)

    def __init__(self, *args):
        this = _otbApplication.new_itkDeleteEvent(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
itkDeleteEvent_swigregister = _otbApplication.itkDeleteEvent_swigregister
itkDeleteEvent_swigregister(itkDeleteEvent)

class itkEndEvent(itkAnyEvent):
    __swig_setmethods__ = {}
    for _s in [itkAnyEvent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, itkEndEvent, name, value)
    __swig_getmethods__ = {}
    for _s in [itkAnyEvent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, itkEndEvent, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _otbApplication.delete_itkEndEvent
    __del__ = lambda self: None

    def GetEventName(self):
        return _otbApplication.itkEndEvent_GetEventName(self)

    def CheckEvent(self, e):
        return _otbApplication.itkEndEvent_CheckEvent(self, e)

    def MakeObject(self):
        return _otbApplication.itkEndEvent_MakeObject(self)

    def __init__(self, *args):
        this = _otbApplication.new_itkEndEvent(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
itkEndEvent_swigregister = _otbApplication.itkEndEvent_swigregister
itkEndEvent_swigregister(itkEndEvent)

class itkExitEvent(itkAnyEvent):
    __swig_setmethods__ = {}
    for _s in [itkAnyEvent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, itkExitEvent, name, value)
    __swig_getmethods__ = {}
    for _s in [itkAnyEvent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, itkExitEvent, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _otbApplication.delete_itkExitEvent
    __del__ = lambda self: None

    def GetEventName(self):
        return _otbApplication.itkExitEvent_GetEventName(self)

    def CheckEvent(self, e):
        return _otbApplication.itkExitEvent_CheckEvent(self, e)

    def MakeObject(self):
        return _otbApplication.itkExitEvent_MakeObject(self)

    def __init__(self, *args):
        this = _otbApplication.new_itkExitEvent(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
itkExitEvent_swigregister = _otbApplication.itkExitEvent_swigregister
itkExitEvent_swigregister(itkExitEvent)

class itkIterationEvent(itkAnyEvent):
    __swig_setmethods__ = {}
    for _s in [itkAnyEvent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, itkIterationEvent, name, value)
    __swig_getmethods__ = {}
    for _s in [itkAnyEvent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, itkIterationEvent, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _otbApplication.delete_itkIterationEvent
    __del__ = lambda self: None

    def GetEventName(self):
        return _otbApplication.itkIterationEvent_GetEventName(self)

    def CheckEvent(self, e):
        return _otbApplication.itkIterationEvent_CheckEvent(self, e)

    def MakeObject(self):
        return _otbApplication.itkIterationEvent_MakeObject(self)

    def __init__(self, *args):
        this = _otbApplication.new_itkIterationEvent(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
itkIterationEvent_swigregister = _otbApplication.itkIterationEvent_swigregister
itkIterationEvent_swigregister(itkIterationEvent)

class itkModifiedEvent(itkAnyEvent):
    __swig_setmethods__ = {}
    for _s in [itkAnyEvent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, itkModifiedEvent, name, value)
    __swig_getmethods__ = {}
    for _s in [itkAnyEvent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, itkModifiedEvent, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _otbApplication.delete_itkModifiedEvent
    __del__ = lambda self: None

    def GetEventName(self):
        return _otbApplication.itkModifiedEvent_GetEventName(self)

    def CheckEvent(self, e):
        return _otbApplication.itkModifiedEvent_CheckEvent(self, e)

    def MakeObject(self):
        return _otbApplication.itkModifiedEvent_MakeObject(self)

    def __init__(self, *args):
        this = _otbApplication.new_itkModifiedEvent(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
itkModifiedEvent_swigregister = _otbApplication.itkModifiedEvent_swigregister
itkModifiedEvent_swigregister(itkModifiedEvent)

class itkPickEvent(itkAnyEvent):
    __swig_setmethods__ = {}
    for _s in [itkAnyEvent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, itkPickEvent, name, value)
    __swig_getmethods__ = {}
    for _s in [itkAnyEvent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, itkPickEvent, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _otbApplication.delete_itkPickEvent
    __del__ = lambda self: None

    def GetEventName(self):
        return _otbApplication.itkPickEvent_GetEventName(self)

    def CheckEvent(self, e):
        return _otbApplication.itkPickEvent_CheckEvent(self, e)

    def MakeObject(self):
        return _otbApplication.itkPickEvent_MakeObject(self)

    def __init__(self, *args):
        this = _otbApplication.new_itkPickEvent(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
itkPickEvent_swigregister = _otbApplication.itkPickEvent_swigregister
itkPickEvent_swigregister(itkPickEvent)

class itkProgressEvent(itkAnyEvent):
    __swig_setmethods__ = {}
    for _s in [itkAnyEvent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, itkProgressEvent, name, value)
    __swig_getmethods__ = {}
    for _s in [itkAnyEvent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, itkProgressEvent, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _otbApplication.delete_itkProgressEvent
    __del__ = lambda self: None

    def GetEventName(self):
        return _otbApplication.itkProgressEvent_GetEventName(self)

    def CheckEvent(self, e):
        return _otbApplication.itkProgressEvent_CheckEvent(self, e)

    def MakeObject(self):
        return _otbApplication.itkProgressEvent_MakeObject(self)

    def __init__(self, *args):
        this = _otbApplication.new_itkProgressEvent(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
itkProgressEvent_swigregister = _otbApplication.itkProgressEvent_swigregister
itkProgressEvent_swigregister(itkProgressEvent)

class itkStartEvent(itkAnyEvent):
    __swig_setmethods__ = {}
    for _s in [itkAnyEvent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, itkStartEvent, name, value)
    __swig_getmethods__ = {}
    for _s in [itkAnyEvent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, itkStartEvent, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _otbApplication.delete_itkStartEvent
    __del__ = lambda self: None

    def GetEventName(self):
        return _otbApplication.itkStartEvent_GetEventName(self)

    def CheckEvent(self, e):
        return _otbApplication.itkStartEvent_CheckEvent(self, e)

    def MakeObject(self):
        return _otbApplication.itkStartEvent_MakeObject(self)

    def __init__(self, *args):
        this = _otbApplication.new_itkStartEvent(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
itkStartEvent_swigregister = _otbApplication.itkStartEvent_swigregister
itkStartEvent_swigregister(itkStartEvent)

class itkStartPickEvent(itkPickEvent):
    __swig_setmethods__ = {}
    for _s in [itkPickEvent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, itkStartPickEvent, name, value)
    __swig_getmethods__ = {}
    for _s in [itkPickEvent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, itkStartPickEvent, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _otbApplication.delete_itkStartPickEvent
    __del__ = lambda self: None

    def GetEventName(self):
        return _otbApplication.itkStartPickEvent_GetEventName(self)

    def CheckEvent(self, e):
        return _otbApplication.itkStartPickEvent_CheckEvent(self, e)

    def MakeObject(self):
        return _otbApplication.itkStartPickEvent_MakeObject(self)

    def __init__(self, *args):
        this = _otbApplication.new_itkStartPickEvent(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
itkStartPickEvent_swigregister = _otbApplication.itkStartPickEvent_swigregister
itkStartPickEvent_swigregister(itkStartPickEvent)

class itkUserEvent(itkAnyEvent):
    __swig_setmethods__ = {}
    for _s in [itkAnyEvent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, itkUserEvent, name, value)
    __swig_getmethods__ = {}
    for _s in [itkAnyEvent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, itkUserEvent, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _otbApplication.delete_itkUserEvent
    __del__ = lambda self: None

    def GetEventName(self):
        return _otbApplication.itkUserEvent_GetEventName(self)

    def CheckEvent(self, e):
        return _otbApplication.itkUserEvent_CheckEvent(self, e)

    def MakeObject(self):
        return _otbApplication.itkUserEvent_MakeObject(self)

    def __init__(self, *args):
        this = _otbApplication.new_itkUserEvent(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
itkUserEvent_swigregister = _otbApplication.itkUserEvent_swigregister
itkUserEvent_swigregister(itkUserEvent)

class itkAbortCheckEvent(itkPickEvent):
    __swig_setmethods__ = {}
    for _s in [itkPickEvent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, itkAbortCheckEvent, name, value)
    __swig_getmethods__ = {}
    for _s in [itkPickEvent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, itkAbortCheckEvent, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _otbApplication.delete_itkAbortCheckEvent
    __del__ = lambda self: None

    def GetEventName(self):
        return _otbApplication.itkAbortCheckEvent_GetEventName(self)

    def CheckEvent(self, e):
        return _otbApplication.itkAbortCheckEvent_CheckEvent(self, e)

    def MakeObject(self):
        return _otbApplication.itkAbortCheckEvent_MakeObject(self)

    def __init__(self, *args):
        this = _otbApplication.new_itkAbortCheckEvent(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
itkAbortCheckEvent_swigregister = _otbApplication.itkAbortCheckEvent_swigregister
itkAbortCheckEvent_swigregister(itkAbortCheckEvent)

class itkEndPickEvent(itkPickEvent):
    __swig_setmethods__ = {}
    for _s in [itkPickEvent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, itkEndPickEvent, name, value)
    __swig_getmethods__ = {}
    for _s in [itkPickEvent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, itkEndPickEvent, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _otbApplication.delete_itkEndPickEvent
    __del__ = lambda self: None

    def GetEventName(self):
        return _otbApplication.itkEndPickEvent_GetEventName(self)

    def CheckEvent(self, e):
        return _otbApplication.itkEndPickEvent_CheckEvent(self, e)

    def MakeObject(self):
        return _otbApplication.itkEndPickEvent_MakeObject(self)

    def __init__(self, *args):
        this = _otbApplication.new_itkEndPickEvent(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
itkEndPickEvent_swigregister = _otbApplication.itkEndPickEvent_swigregister
itkEndPickEvent_swigregister(itkEndPickEvent)

DefaultValueMode_UNKNOWN = _otbApplication.DefaultValueMode_UNKNOWN
DefaultValueMode_RELATIVE = _otbApplication.DefaultValueMode_RELATIVE
DefaultValueMode_ABSOLUTE = _otbApplication.DefaultValueMode_ABSOLUTE
ParameterType_Empty = _otbApplication.ParameterType_Empty
ParameterType_Int = _otbApplication.ParameterType_Int
ParameterType_Float = _otbApplication.ParameterType_Float
ParameterType_String = _otbApplication.ParameterType_String
ParameterType_StringList = _otbApplication.ParameterType_StringList
ParameterType_InputFilename = _otbApplication.ParameterType_InputFilename
ParameterType_InputFilenameList = _otbApplication.ParameterType_InputFilenameList
ParameterType_OutputFilename = _otbApplication.ParameterType_OutputFilename
ParameterType_Directory = _otbApplication.ParameterType_Directory
ParameterType_Choice = _otbApplication.ParameterType_Choice
ParameterType_InputImage = _otbApplication.ParameterType_InputImage
ParameterType_InputImageList = _otbApplication.ParameterType_InputImageList
ParameterType_InputVectorData = _otbApplication.ParameterType_InputVectorData
ParameterType_InputVectorDataList = _otbApplication.ParameterType_InputVectorDataList
ParameterType_OutputImage = _otbApplication.ParameterType_OutputImage
ParameterType_OutputVectorData = _otbApplication.ParameterType_OutputVectorData
ParameterType_Radius = _otbApplication.ParameterType_Radius
ParameterType_Group = _otbApplication.ParameterType_Group
ParameterType_ListView = _otbApplication.ParameterType_ListView
ParameterType_ComplexInputImage = _otbApplication.ParameterType_ComplexInputImage
ParameterType_ComplexOutputImage = _otbApplication.ParameterType_ComplexOutputImage
ParameterType_RAM = _otbApplication.ParameterType_RAM
ParameterType_OutputProcessXML = _otbApplication.ParameterType_OutputProcessXML
ParameterType_InputProcessXML = _otbApplication.ParameterType_InputProcessXML
UserLevel_Basic = _otbApplication.UserLevel_Basic
UserLevel_Advanced = _otbApplication.UserLevel_Advanced
ImagePixelType_uint8 = _otbApplication.ImagePixelType_uint8
ImagePixelType_int16 = _otbApplication.ImagePixelType_int16
ImagePixelType_uint16 = _otbApplication.ImagePixelType_uint16
ImagePixelType_int32 = _otbApplication.ImagePixelType_int32
ImagePixelType_uint32 = _otbApplication.ImagePixelType_uint32
ImagePixelType_float = _otbApplication.ImagePixelType_float
ImagePixelType_double = _otbApplication.ImagePixelType_double
Role_Input = _otbApplication.Role_Input
Role_Output = _otbApplication.Role_Output
ComplexImagePixelType_float = _otbApplication.ComplexImagePixelType_float
ComplexImagePixelType_double = _otbApplication.ComplexImagePixelType_double
class Application(itkObject):
    __swig_setmethods__ = {}
    for _s in [itkObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Application, name, value)
    __swig_getmethods__ = {}
    for _s in [itkObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Application, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetName(self, name):
        return _otbApplication.Application_SetName(self, name)

    def GetName(self):
        return _otbApplication.Application_GetName(self)

    def SetDescription(self, _arg):
        return _otbApplication.Application_SetDescription(self, _arg)

    def GetDescription(self):
        return _otbApplication.Application_GetDescription(self)

    def Init(self):
        return _otbApplication.Application_Init(self)

    def UpdateParameters(self):
        return _otbApplication.Application_UpdateParameters(self)

    def Execute(self):
        return _otbApplication.Application_Execute(self)

    def ExecuteAndWriteOutput(self):
        return _otbApplication.Application_ExecuteAndWriteOutput(self)

    def GetParametersKeys(self, recursive=True):
        return _otbApplication.Application_GetParametersKeys(self, recursive)

    def GetParameterByKey(self, name):
        return _otbApplication.Application_GetParameterByKey(self, name)

    def GetParameterName(self, arg2):
        return _otbApplication.Application_GetParameterName(self, arg2)

    def GetParameterDescription(self, arg2):
        return _otbApplication.Application_GetParameterDescription(self, arg2)

    def SetParameterDescription(self, paramKey, dec):
        return _otbApplication.Application_SetParameterDescription(self, paramKey, dec)

    def SetParameterUserValue(self, paramKey, value):
        return _otbApplication.Application_SetParameterUserValue(self, paramKey, value)

    def EnableParameter(self, paramKey):
        return _otbApplication.Application_EnableParameter(self, paramKey)

    def DisableParameter(self, paramKey):
        return _otbApplication.Application_DisableParameter(self, paramKey)

    def IsParameterEnabled(self, paramKey):
        return _otbApplication.Application_IsParameterEnabled(self, paramKey)

    def IsMandatory(self, paramKey):
        return _otbApplication.Application_IsMandatory(self, paramKey)

    def HasAutomaticValue(self, paramKey):
        return _otbApplication.Application_HasAutomaticValue(self, paramKey)

    def HasUserValue(self, paramKey):
        return _otbApplication.Application_HasUserValue(self, paramKey)

    def ClearValue(self, paramKey):
        return _otbApplication.Application_ClearValue(self, paramKey)

    def HasValue(self, paramKey):
        return _otbApplication.Application_HasValue(self, paramKey)

    def GetParameterUserLevel(self, paramKey):
        return _otbApplication.Application_GetParameterUserLevel(self, paramKey)

    def GetParameterType(self, paramKey):
        return _otbApplication.Application_GetParameterType(self, paramKey)

    def GetParameterRole(self, paramKey):
        return _otbApplication.Application_GetParameterRole(self, paramKey)

    def GetChoiceKeys(self, choiceKey):
        return _otbApplication.Application_GetChoiceKeys(self, choiceKey)

    def GetChoiceNames(self, choiceKey):
        return _otbApplication.Application_GetChoiceNames(self, choiceKey)

    def IsApplicationReady(self):
        return _otbApplication.Application_IsApplicationReady(self)

    def SetParameterInt(self, parameter, value, hasUserValueFlag=True):
        return _otbApplication.Application_SetParameterInt(self, parameter, value, hasUserValueFlag)

    def SetParameterFloat(self, parameter, value, hasUserValueFlag=True):
        return _otbApplication.Application_SetParameterFloat(self, parameter, value, hasUserValueFlag)

    def SetParameterString(self, parameter, value, hasUserValueFlag=True):
        return _otbApplication.Application_SetParameterString(self, parameter, value, hasUserValueFlag)

    def SetParameterStringList(self, parameter, values, hasUserValueFlag=True):
        return _otbApplication.Application_SetParameterStringList(self, parameter, values, hasUserValueFlag)

    def SetParameterEmpty(self, parameter, value, hasUserValueFlag=True):
        return _otbApplication.Application_SetParameterEmpty(self, parameter, value, hasUserValueFlag)

    def SetParameterOutputImagePixelType(self, parameter, pixelType):
        return _otbApplication.Application_SetParameterOutputImagePixelType(self, parameter, pixelType)

    def SetParameterComplexOutputImagePixelType(self, parameter, cpixelType):
        return _otbApplication.Application_SetParameterComplexOutputImagePixelType(self, parameter, cpixelType)

    def GetParameterOutputImagePixelType(self, parameter):
        return _otbApplication.Application_GetParameterOutputImagePixelType(self, parameter)

    def GetParameterComplexOutputImagePixelType(self, parameter):
        return _otbApplication.Application_GetParameterComplexOutputImagePixelType(self, parameter)

    def GetParameterInt(self, parameter):
        return _otbApplication.Application_GetParameterInt(self, parameter)

    def GetParameterFloat(self, parameter):
        return _otbApplication.Application_GetParameterFloat(self, parameter)

    def GetParameterString(self, parameter):
        return _otbApplication.Application_GetParameterString(self, parameter)

    def GetParameterStringList(self, parameter):
        return _otbApplication.Application_GetParameterStringList(self, parameter)

    def GetParameterAsString(self, paramKey):
        return _otbApplication.Application_GetParameterAsString(self, paramKey)

    def GetParameterOutputImage(self, parameter):
        return _otbApplication.Application_GetParameterOutputImage(self, parameter)

    def SetParameterInputImage(self, parameter, inputImage):
        return _otbApplication.Application_SetParameterInputImage(self, parameter, inputImage)

    def GetParameterComplexOutputImage(self, parameter):
        return _otbApplication.Application_GetParameterComplexOutputImage(self, parameter)

    def SetParameterComplexInputImage(self, parameter, inputImage):
        return _otbApplication.Application_SetParameterComplexInputImage(self, parameter, inputImage)

    def AddImageToParameterInputImageList(self, parameter, img):
        return _otbApplication.Application_AddImageToParameterInputImageList(self, parameter, img)

    def AddParameterStringList(self, parameter, str):
        return _otbApplication.Application_AddParameterStringList(self, parameter, str)

    def SetNthParameterInputImageList(self, parameter, id, img):
        return _otbApplication.Application_SetNthParameterInputImageList(self, parameter, id, img)

    def SetNthParameterStringList(self, parameter, id, str):
        return _otbApplication.Application_SetNthParameterStringList(self, parameter, id, str)

    def ClearParameterInputImageList(self, parameter):
        return _otbApplication.Application_ClearParameterInputImageList(self, parameter)

    def GetNumberOfElementsInParameterInputImageList(self, parameter):
        return _otbApplication.Application_GetNumberOfElementsInParameterInputImageList(self, parameter)

    def GetProgressSource(self):
        return _otbApplication.Application_GetProgressSource(self)

    def GetProgressDescription(self):
        return _otbApplication.Application_GetProgressDescription(self)

    def SetDocName(self, _arg):
        return _otbApplication.Application_SetDocName(self, _arg)

    def GetDocName(self):
        return _otbApplication.Application_GetDocName(self)

    def SetDocLongDescription(self, _arg):
        return _otbApplication.Application_SetDocLongDescription(self, _arg)

    def GetDocLongDescription(self):
        return _otbApplication.Application_GetDocLongDescription(self)

    def SetDocAuthors(self, _arg):
        return _otbApplication.Application_SetDocAuthors(self, _arg)

    def GetDocAuthors(self):
        return _otbApplication.Application_GetDocAuthors(self)

    def SetDocLimitations(self, _arg):
        return _otbApplication.Application_SetDocLimitations(self, _arg)

    def GetDocLimitations(self):
        return _otbApplication.Application_GetDocLimitations(self)

    def SetDocSeeAlso(self, _arg):
        return _otbApplication.Application_SetDocSeeAlso(self, _arg)

    def GetDocSeeAlso(self):
        return _otbApplication.Application_GetDocSeeAlso(self)

    def SetDocTags(self, val):
        return _otbApplication.Application_SetDocTags(self, val)

    def AddDocTag(self, tag):
        return _otbApplication.Application_AddDocTag(self, tag)

    def GetDocTags(self):
        return _otbApplication.Application_GetDocTags(self)

    def GetParameterList(self):
        return _otbApplication.Application_GetParameterList(self)

    def GetNumberOfExamples(self):
        return _otbApplication.Application_GetNumberOfExamples(self)

    def GetExampleComment(self, id):
        return _otbApplication.Application_GetExampleComment(self, id)

    def GetExampleNumberOfParameters(self, id):
        return _otbApplication.Application_GetExampleNumberOfParameters(self, id)

    def GetExampleParameterKey(self, exId, paramId):
        return _otbApplication.Application_GetExampleParameterKey(self, exId, paramId)

    def GetExampleParameterValue(self, exId, paramId):
        return _otbApplication.Application_GetExampleParameterValue(self, exId, paramId)

    def SetDocExampleParameterValue(self, key, value, exId=0):
        return _otbApplication.Application_SetDocExampleParameterValue(self, key, value, exId)

    def SetExampleComment(self, comm, i):
        return _otbApplication.Application_SetExampleComment(self, comm, i)

    def AddExample(self, *args):
        return _otbApplication.Application_AddExample(self, *args)

    def GetCLExample(self):
        return _otbApplication.Application_GetCLExample(self)

    def GetHtmlExample(self):
        return _otbApplication.Application_GetHtmlExample(self)

    def GetOutputParametersSumUp(self):
        return _otbApplication.Application_GetOutputParametersSumUp(self)

    def SetVectorImageFromFloatNumpyArray_(self, pkey, buffer):
        return _otbApplication.Application_SetVectorImageFromFloatNumpyArray_(self, pkey, buffer)

    def SetVectorImageFromInt8NumpyArray_(self, pkey, buffer):
        return _otbApplication.Application_SetVectorImageFromInt8NumpyArray_(self, pkey, buffer)

    def SetVectorImageFromInt16NumpyArray_(self, pkey, buffer):
        return _otbApplication.Application_SetVectorImageFromInt16NumpyArray_(self, pkey, buffer)

    def SetVectorImageFromInt32NumpyArray_(self, pkey, buffer):
        return _otbApplication.Application_SetVectorImageFromInt32NumpyArray_(self, pkey, buffer)

    def SetVectorImageFromInt64NumpyArray_(self, pkey, buffer):
        return _otbApplication.Application_SetVectorImageFromInt64NumpyArray_(self, pkey, buffer)

    def SetVectorImageFromUInt8NumpyArray_(self, pkey, buffer):
        return _otbApplication.Application_SetVectorImageFromUInt8NumpyArray_(self, pkey, buffer)

    def SetVectorImageFromUInt16NumpyArray_(self, pkey, buffer):
        return _otbApplication.Application_SetVectorImageFromUInt16NumpyArray_(self, pkey, buffer)

    def SetVectorImageFromUInt32NumpyArray_(self, pkey, buffer):
        return _otbApplication.Application_SetVectorImageFromUInt32NumpyArray_(self, pkey, buffer)

    def SetVectorImageFromUInt64NumpyArray_(self, pkey, buffer):
        return _otbApplication.Application_SetVectorImageFromUInt64NumpyArray_(self, pkey, buffer)

    def SetVectorImageFromDoubleNumpyArray_(self, pkey, buffer):
        return _otbApplication.Application_SetVectorImageFromDoubleNumpyArray_(self, pkey, buffer)

    def SetImageFromFloatNumpyArray_(self, pkey, buffer):
        return _otbApplication.Application_SetImageFromFloatNumpyArray_(self, pkey, buffer)

    def SetImageFromInt8NumpyArray_(self, pkey, buffer):
        return _otbApplication.Application_SetImageFromInt8NumpyArray_(self, pkey, buffer)

    def SetImageFromInt16NumpyArray_(self, pkey, buffer):
        return _otbApplication.Application_SetImageFromInt16NumpyArray_(self, pkey, buffer)

    def SetImageFromInt32NumpyArray_(self, pkey, buffer):
        return _otbApplication.Application_SetImageFromInt32NumpyArray_(self, pkey, buffer)

    def SetImageFromInt64NumpyArray_(self, pkey, buffer):
        return _otbApplication.Application_SetImageFromInt64NumpyArray_(self, pkey, buffer)

    def SetImageFromUInt8NumpyArray_(self, pkey, buffer):
        return _otbApplication.Application_SetImageFromUInt8NumpyArray_(self, pkey, buffer)

    def SetImageFromUInt16NumpyArray_(self, pkey, buffer):
        return _otbApplication.Application_SetImageFromUInt16NumpyArray_(self, pkey, buffer)

    def SetImageFromUInt32NumpyArray_(self, pkey, buffer):
        return _otbApplication.Application_SetImageFromUInt32NumpyArray_(self, pkey, buffer)

    def SetImageFromUInt64NumpyArray_(self, pkey, buffer):
        return _otbApplication.Application_SetImageFromUInt64NumpyArray_(self, pkey, buffer)

    def SetImageFromDoubleNumpyArray_(self, pkey, buffer):
        return _otbApplication.Application_SetImageFromDoubleNumpyArray_(self, pkey, buffer)

    def GetVectorImageAsFloatNumpyArray_(self, pkey):
        return _otbApplication.Application_GetVectorImageAsFloatNumpyArray_(self, pkey)

    def GetVectorImageAsInt16NumpyArray_(self, pkey):
        return _otbApplication.Application_GetVectorImageAsInt16NumpyArray_(self, pkey)

    def GetVectorImageAsInt32NumpyArray_(self, pkey):
        return _otbApplication.Application_GetVectorImageAsInt32NumpyArray_(self, pkey)

    def GetVectorImageAsUInt8NumpyArray_(self, pkey):
        return _otbApplication.Application_GetVectorImageAsUInt8NumpyArray_(self, pkey)

    def GetVectorImageAsUInt16NumpyArray_(self, pkey):
        return _otbApplication.Application_GetVectorImageAsUInt16NumpyArray_(self, pkey)

    def GetVectorImageAsUInt32NumpyArray_(self, pkey):
        return _otbApplication.Application_GetVectorImageAsUInt32NumpyArray_(self, pkey)

    def GetVectorImageAsDoubleNumpyArray_(self, pkey):
        return _otbApplication.Application_GetVectorImageAsDoubleNumpyArray_(self, pkey)
    __swig_destroy__ = _otbApplication.delete_Application
    __del__ = lambda self: None


    def __str__(self):
    	s  = self.GetDocName()

    def GetParameterTypeAsString(self, parameter_type):
    	return {
    		ParameterType_InputProcessXML : 'ParameterType_InputProcessXML',
    		ParameterType_String : 'ParameterType_String',
    		ParameterType_InputFilename : 'ParameterType_InputFilename',
    		ParameterType_OutputImage : 'ParameterType_OutputImage',
    		ParameterType_OutputVectorData : 'ParameterType_OutputVectorData',
    		ParameterType_OutputProcessXML : 'ParameterType_OutputProcessXML',
    		ParameterType_OutputFilename : 'ParameterType_OutputFilename',
    		ParameterType_Directory : 'ParameterType_Directory',
    		ParameterType_InputImage : 'ParameterType_InputImage',
    		ParameterType_ComplexInputImage : 'ParameterType_ComplexInputImage',
    		ParameterType_InputVectorData : 'ParameterType_InputVectorData',
    		ParameterType_InputImageList : 'ParameterType_InputImageList',
    		ParameterType_InputVectorDataList : 'ParameterType_InputImageList',
    		ParameterType_InputFilenameList : 'ParameterType_InputFilenameList',
    		ParameterType_StringList : 'ParameterType_StringList',
    		ParameterType_ListView : 'ParameterType_ListView',
    		ParameterType_Int : 'ParameterType_Int',
    		ParameterType_Radius : 'ParameterType_Radius',
    		ParameterType_RAM : 'ParameterType_RAM',
    		ParameterType_Float : 'ParameterType_Float',
    		ParameterType_Empty : 'ParameterType_Empty',
    		ParameterType_Choice : 'ParameterType_Choice',
    		ParameterType_Group : 'ParameterType_Group',
    	}.get(parameter_type, 'ParameterType_UNKNOWN')

    def __str__(self):
    	s  = self.GetDocName()
    	s += '\n'
    	s += self.GetDocLongDescription()
    	return s

    def SetParameterValue(self, paramKey, value):
    	paramType = self.GetParameterType(paramKey)
    	if paramType in [ParameterType_InputProcessXML, ParameterType_RAM,
    									 ParameterType_String, ParameterType_InputFilename,
    									 ParameterType_OutputImage, ParameterType_OutputVectorData,
    									 ParameterType_OutputProcessXML, ParameterType_OutputFilename,
    									 ParameterType_Directory, ParameterType_InputImage,
    									 ParameterType_ComplexInputImage, ParameterType_InputVectorData]:
    	  return self.SetParameterString(paramKey, value)
    	elif paramType in [ParameterType_InputImageList, ParameterType_InputVectorDataList,
    										 ParameterType_InputFilenameList, ParameterType_StringList,
    										 ParameterType_ListView]:
    	  return self.setParameterStringList(paramKey, value)
    	elif paramType in [ParameterType_Int, ParameterType_Radius]:
    	  return self.SetParameterInt(paramKey, value)
    	elif paramType in [ParameterType_Float]:
    	  return self.SetParameterFloat(paramKey, value)
    	elif paramType in [ParameterType_Empty]:
    	  return self.EnableParameter(paramKey)
    	elif paramType in [ParameterType_Group]:
    	  return ApplicationProxy(self, paramKey)
    	elif paramType in [ParameterType_Choice]:
    	  return ApplicationProxy(self, paramKey, value)
    	else:
    	  print ("Unsupported parameter type '%s' with key '%s'" %(self.GetParameterTypeAsString(paramType) ,paramKey))
    	return

    def GetParameterValue(self, paramKey):
    	paramType = self.GetParameterType(paramKey)
    	if paramType in [ParameterType_InputProcessXML,
    									 ParameterType_String, ParameterType_InputFilename,
    									 ParameterType_OutputImage, ParameterType_OutputVectorData,
    									 ParameterType_OutputProcessXML, ParameterType_OutputFilename,
    									 ParameterType_Directory, ParameterType_InputImage,
    									 ParameterType_ComplexInputImage, ParameterType_InputVectorData]:
    	  return self.GetParameterString(paramKey)
    	elif paramType in [ParameterType_InputImageList, ParameterType_InputVectorDataList,
    										 ParameterType_InputFilenameList, ParameterType_StringList,
    										 ParameterType_ListView]:
    	  return self.GetParameterStringList(paramKey)
    	elif paramType in [ParameterType_Int, ParameterType_Radius, ParameterType_RAM]:
    	  return self.GetParameterInt(paramKey)
    	elif paramType in [ParameterType_Float]:
    	  return self.GetParameterFloat(paramKey)
    	elif paramType in [ParameterType_Empty]:
    	  return self.IsParameterEnabled(paramKey)
    	elif paramType in [ParameterType_Group, ParameterType_Choice]:
    	  return ApplicationProxy(self, paramKey)
    	else:
    	  print ("Unsupported parameter type '%s' with key '%s'" %(self.GetParameterTypeAsString(paramType) ,paramKey))
    	return None

    def __getattr__(self,attr):
      """
      __get_attribute__ is called whenever an instance request an attribute.
      eg: App.SetParameterString(), App.GetName() ..
      __getattr__ is only called if the attribute is not found by __get_attribute__ call
      So we keep hide the GetParameter** calls within this method so that it seems like
      an obivous call for users. App.IN , App.OUT , where 'in' and 'out' are
      parameters in the 'otb application' with instance App
      """
      if attr is not None:
        key_list = [k.upper() for k in self.GetParametersKeys(True)]
        if attr in key_list:
          return self.GetParameterValue(attr.lower())
        else:
          raise AttributeError("Parameter {} does not exist in the application.".format(attr.lower()))

    def __setattr__(self, attr, value):
      """
      __setattr__ is called if the attribute requested is not found in the attribute list.
      So these attributes are supposed to be 'key' of parameters used. Here we
      keep hide the SetParameter** calls within this method so that it seems like
      an obivous call for users. App.IN='my-input-file-name' , App.OUT='my-output-file-name'w
      here 'in' and 'out' are    parameters in the 'otb application' with instance App
      Ofcourse, we don't blindly accept any attributes as python, we check them against
      list of existing parameters for application with 'self.GetParametersKeys(True)'
      """
      if attr is not None:
        key_list = [k.upper() for k in self.GetParametersKeys(True)]
        if attr in key_list:
          self.SetParameterValue(attr.lower(), value)
        else:
          raise AttributeError("Parameter {} does not exist in the application.".format(attr.lower()))



    def SetImageFromNumpyArray(self, paramKey, npArray):
      """
      This method takes a numpy array and set ImageIOBase of
      InputImageParameter by creating an otbImage with
      same pixel type as numpyarray.dtype
      """
      if len(npArray.shape) == 3:
         raise ValueError( "(len(npArray.shape) == 3)\n"
                           "Input array given is of 3 dimension.\n"
                           "SetImageFromNumpyArray create ImageIO from otbImage and thus demands a 2d array.\n"
                           "you can either provide an 2d numpy array or use SetVectorImageFromNumpyArray depending on your application.\n")

      dt = npArray.dtype.name
      if dt == 'int8':
        self.SetImageFromInt8NumpyArray_(paramKey, npArray)
      elif dt == 'int16':
        self.SetImageFromInt16NumpyArray_(paramKey, npArray)
      elif dt == 'int32':
        self.SetImageFromInt32NumpyArray_(paramKey, npArray)
      elif dt == 'uint8':
        self.SetImageFromUInt8NumpyArray_(paramKey, npArray)
      elif dt == 'uint16':
        self.SetImageFromUInt16NumpyArray_(paramKey, npArray)
      elif dt == 'uint32':
        self.SetImageFromUInt32NumpyArray_(paramKey, npArray)
      elif dt == 'float':
        self.SetImageFromFloatNumpyArray_(paramKey, npArray)
      elif dt == 'double':
        self.SetImageFromDoubleNumpyArray_(paramKey, npArray)
      else:
        self.SetImageFromFloatNumpyArray_(paramKey, npArray)
      return

    def SetVectorImageFromNumpyArray(self, paramKey, npArray):
      """
      This method takes a numpy array and set ImageIOBase of
      InputImageParameter by creating an otbVectorImage with
      same pixel type as numpyarray.dtype.
      NOTE: Input (npArray) must be an ndarray with 3 dimension,
      len(npArray.shape) must be > 2
      """
      if len(npArray.shape) < 3:
        raise ValueError( "(len(npArray.shape) < 3)\n"
                        "Input array given is not of 3 dimension.\n"
                        "SetVectorImageFromNumpyArray create ImageIO from otbVectorImage and thus demands an array of shape 3.\n"
                        "you can either provide an 3d numpy array or use SetImageFromNumpyArray depending on your application.\n")

      dt = npArray.dtype.name
      if dt == 'int8':
        self.SetVectorImageFromInt8NumpyArray_(paramKey, npArray)
      elif dt == 'int16':
        self.SetVectorImageFromInt16NumpyArray_(paramKey, npArray)
      elif dt == 'int32':
        self.SetVectorImageFromInt32NumpyArray_(paramKey, npArray)
      elif dt == 'uint8':
        self.SetVectorImageFromUInt8NumpyArray_(paramKey, npArray)
      elif dt == 'uint16':
        self.SetVectorImageFromUInt16NumpyArray_(paramKey, npArray)
      elif dt == 'uint32':
        self.SetVectorImageFromUInt32NumpyArray_(paramKey, npArray)
      elif dt == 'float':
        self.SetVectorImageFromFloatNumpyArray_(paramKey, npArray)
      elif dt == 'double':
        self.SetVectorImageFromDoubleNumpyArray_(paramKey, npArray)
      else:
        self.SetVectorImageFromFloatNumpyArray_(paramKey, npArray)
      return

    def GetVectorImageAsNumpyArray(self, paramKey, dt='float'):
      """
      If datatype is unknown this method assumes to numpy.float32
      Valid datatypes are:
      int8, int16, int32, uint8, uint16, uint32, float, double.
      NOTE: This method always return an numpy array with dimension 3
      """
      if dt == 'int8':
        return self.GetVectorImageAsInt8NumpyArray_(paramKey)
      elif dt == 'int16':
        return self.GetVectorImageAsInt16NumpyArray_(paramKey)
      elif dt == 'int32':
        return self.GetVectorImageAsInt32NumpyArray_(paramKey)
      elif dt == 'uint8':
        return self.GetVectorImageAsUInt8NumpyArray_(paramKey)
      elif dt == 'uint16':
        return self.GetVectorImageAsUInt16NumpyArray_(paramKey)
      elif dt == 'uint32':
        return self.GetVectorImageAsUInt32NumpyArray_(paramKey)
      elif dt == 'float':
        return self.GetVectorImageAsFloatNumpyArray_(paramKey)
      elif dt == 'double':
        return self.GetVectorImageAsDoubleNumpyArray_(paramKey)
      else:
        print ("Unknown datatype '" + dt + "'. Using float instead. Available types are:")
        print ("int8, int16, int32, uint8, uint16, uint32, float, double")
        return self.GetVectorImageAsFloatNumpyArray_(paramKey)

    def GetImageAsNumpyArray(self, paramKey, dt='float'):
      """
      If datatype is unknown this method assumes to numpy.float32
      Valid datatypes are:
      int8, int16, int32, uint8, uint16, uint32, float, double.
      NOTE: This method always return an numpy array with dimension 3
      """
      if dt == 'int8':
        numpy_vector_image = self.GetVectorImageAsInt8NumpyArray_(paramKey)
      elif dt == 'int16':
        numpy_vector_image = self.GetVectorImageAsInt16NumpyArray_(paramKey)
      elif dt == 'int32':
        numpy_vector_image = self.GetVectorImageAsInt32NumpyArray_(paramKey)
      elif dt == 'uint8':
        numpy_vector_image = self.GetVectorImageAsUInt8NumpyArray_(paramKey)
      elif dt == 'uint16':
        numpy_vector_image = self.GetVectorImageAsUInt16NumpyArray_(paramKey)
      elif dt == 'uint32':
        numpy_vector_image = self.GetVectorImageAsUInt32NumpyArray_(paramKey)
      elif dt == 'float':
        numpy_vector_image = self.GetVectorImageAsFloatNumpyArray_(paramKey)
      elif dt == 'double':
        numpy_vector_image = self.GetVectorImageAsDoubleNumpyArray_(paramKey)

      else:
        print ("Unknown datatype '" + dt + "'. Using float instead. Available types are:")
        print ("int8, int16, int32, uint8, uint16, uint32, float, double")
        numpy_vector_image = self.GetVectorImageAsFloatNumpyArray_(paramKey)

      if len(numpy_vector_image.shape) > 2:
        raise ValueError("len(numpy_vector_image.shape) > 2\n"
                         "Output image from application is of 3 dimension (len(nparray.shape) > 2). \n"
                         "GetImageFromNumpyArray returns an numpy array of dimension 2 that will result is loss of data.\n"
                         "In this case you must use GetVectorImageFromNumpyArray which is capable of return a 3 dimension image.\n")

      numpy_vector_image = numpy_vector_image[:,:,1]
      return numpy_vector_image



Application_swigregister = _otbApplication.Application_swigregister
Application_swigregister(Application)

class Application_Pointer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Application_Pointer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Application_Pointer, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _otbApplication.new_Application_Pointer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _otbApplication.delete_Application_Pointer
    __del__ = lambda self: None

    def __deref__(self):
        return _otbApplication.Application_Pointer___deref__(self)

    def IsNotNull(self):
        return _otbApplication.Application_Pointer_IsNotNull(self)

    def IsNull(self):
        return _otbApplication.Application_Pointer_IsNull(self)

    def GetPointer(self):
        return _otbApplication.Application_Pointer_GetPointer(self)

    def SetName(self, name):
        return _otbApplication.Application_Pointer_SetName(self, name)

    def GetName(self):
        return _otbApplication.Application_Pointer_GetName(self)

    def SetDescription(self, _arg):
        return _otbApplication.Application_Pointer_SetDescription(self, _arg)

    def GetDescription(self):
        return _otbApplication.Application_Pointer_GetDescription(self)

    def Init(self):
        return _otbApplication.Application_Pointer_Init(self)

    def UpdateParameters(self):
        return _otbApplication.Application_Pointer_UpdateParameters(self)

    def Execute(self):
        return _otbApplication.Application_Pointer_Execute(self)

    def ExecuteAndWriteOutput(self):
        return _otbApplication.Application_Pointer_ExecuteAndWriteOutput(self)

    def GetParametersKeys(self, recursive=True):
        return _otbApplication.Application_Pointer_GetParametersKeys(self, recursive)

    def GetParameterByKey(self, name):
        return _otbApplication.Application_Pointer_GetParameterByKey(self, name)

    def GetParameterName(self, arg2):
        return _otbApplication.Application_Pointer_GetParameterName(self, arg2)

    def GetParameterDescription(self, arg2):
        return _otbApplication.Application_Pointer_GetParameterDescription(self, arg2)

    def SetParameterDescription(self, paramKey, dec):
        return _otbApplication.Application_Pointer_SetParameterDescription(self, paramKey, dec)

    def SetParameterUserValue(self, paramKey, value):
        return _otbApplication.Application_Pointer_SetParameterUserValue(self, paramKey, value)

    def EnableParameter(self, paramKey):
        return _otbApplication.Application_Pointer_EnableParameter(self, paramKey)

    def DisableParameter(self, paramKey):
        return _otbApplication.Application_Pointer_DisableParameter(self, paramKey)

    def IsParameterEnabled(self, paramKey):
        return _otbApplication.Application_Pointer_IsParameterEnabled(self, paramKey)

    def IsMandatory(self, paramKey):
        return _otbApplication.Application_Pointer_IsMandatory(self, paramKey)

    def HasAutomaticValue(self, paramKey):
        return _otbApplication.Application_Pointer_HasAutomaticValue(self, paramKey)

    def HasUserValue(self, paramKey):
        return _otbApplication.Application_Pointer_HasUserValue(self, paramKey)

    def ClearValue(self, paramKey):
        return _otbApplication.Application_Pointer_ClearValue(self, paramKey)

    def HasValue(self, paramKey):
        return _otbApplication.Application_Pointer_HasValue(self, paramKey)

    def GetParameterUserLevel(self, paramKey):
        return _otbApplication.Application_Pointer_GetParameterUserLevel(self, paramKey)

    def GetParameterType(self, paramKey):
        return _otbApplication.Application_Pointer_GetParameterType(self, paramKey)

    def GetParameterRole(self, paramKey):
        return _otbApplication.Application_Pointer_GetParameterRole(self, paramKey)

    def GetChoiceKeys(self, choiceKey):
        return _otbApplication.Application_Pointer_GetChoiceKeys(self, choiceKey)

    def GetChoiceNames(self, choiceKey):
        return _otbApplication.Application_Pointer_GetChoiceNames(self, choiceKey)

    def IsApplicationReady(self):
        return _otbApplication.Application_Pointer_IsApplicationReady(self)

    def SetParameterInt(self, parameter, value, hasUserValueFlag=True):
        return _otbApplication.Application_Pointer_SetParameterInt(self, parameter, value, hasUserValueFlag)

    def SetParameterFloat(self, parameter, value, hasUserValueFlag=True):
        return _otbApplication.Application_Pointer_SetParameterFloat(self, parameter, value, hasUserValueFlag)

    def SetParameterString(self, parameter, value, hasUserValueFlag=True):
        return _otbApplication.Application_Pointer_SetParameterString(self, parameter, value, hasUserValueFlag)

    def SetParameterStringList(self, parameter, values, hasUserValueFlag=True):
        return _otbApplication.Application_Pointer_SetParameterStringList(self, parameter, values, hasUserValueFlag)

    def SetParameterEmpty(self, parameter, value, hasUserValueFlag=True):
        return _otbApplication.Application_Pointer_SetParameterEmpty(self, parameter, value, hasUserValueFlag)

    def SetParameterOutputImagePixelType(self, parameter, pixelType):
        return _otbApplication.Application_Pointer_SetParameterOutputImagePixelType(self, parameter, pixelType)

    def SetParameterComplexOutputImagePixelType(self, parameter, cpixelType):
        return _otbApplication.Application_Pointer_SetParameterComplexOutputImagePixelType(self, parameter, cpixelType)

    def GetParameterOutputImagePixelType(self, parameter):
        return _otbApplication.Application_Pointer_GetParameterOutputImagePixelType(self, parameter)

    def GetParameterComplexOutputImagePixelType(self, parameter):
        return _otbApplication.Application_Pointer_GetParameterComplexOutputImagePixelType(self, parameter)

    def GetParameterInt(self, parameter):
        return _otbApplication.Application_Pointer_GetParameterInt(self, parameter)

    def GetParameterFloat(self, parameter):
        return _otbApplication.Application_Pointer_GetParameterFloat(self, parameter)

    def GetParameterString(self, parameter):
        return _otbApplication.Application_Pointer_GetParameterString(self, parameter)

    def GetParameterStringList(self, parameter):
        return _otbApplication.Application_Pointer_GetParameterStringList(self, parameter)

    def GetParameterAsString(self, paramKey):
        return _otbApplication.Application_Pointer_GetParameterAsString(self, paramKey)

    def GetParameterOutputImage(self, parameter):
        return _otbApplication.Application_Pointer_GetParameterOutputImage(self, parameter)

    def SetParameterInputImage(self, parameter, inputImage):
        return _otbApplication.Application_Pointer_SetParameterInputImage(self, parameter, inputImage)

    def GetParameterComplexOutputImage(self, parameter):
        return _otbApplication.Application_Pointer_GetParameterComplexOutputImage(self, parameter)

    def SetParameterComplexInputImage(self, parameter, inputImage):
        return _otbApplication.Application_Pointer_SetParameterComplexInputImage(self, parameter, inputImage)

    def AddImageToParameterInputImageList(self, parameter, img):
        return _otbApplication.Application_Pointer_AddImageToParameterInputImageList(self, parameter, img)

    def AddParameterStringList(self, parameter, str):
        return _otbApplication.Application_Pointer_AddParameterStringList(self, parameter, str)

    def SetNthParameterInputImageList(self, parameter, id, img):
        return _otbApplication.Application_Pointer_SetNthParameterInputImageList(self, parameter, id, img)

    def SetNthParameterStringList(self, parameter, id, str):
        return _otbApplication.Application_Pointer_SetNthParameterStringList(self, parameter, id, str)

    def ClearParameterInputImageList(self, parameter):
        return _otbApplication.Application_Pointer_ClearParameterInputImageList(self, parameter)

    def GetNumberOfElementsInParameterInputImageList(self, parameter):
        return _otbApplication.Application_Pointer_GetNumberOfElementsInParameterInputImageList(self, parameter)

    def GetProgressSource(self):
        return _otbApplication.Application_Pointer_GetProgressSource(self)

    def GetProgressDescription(self):
        return _otbApplication.Application_Pointer_GetProgressDescription(self)

    def SetDocName(self, _arg):
        return _otbApplication.Application_Pointer_SetDocName(self, _arg)

    def GetDocName(self):
        return _otbApplication.Application_Pointer_GetDocName(self)

    def SetDocLongDescription(self, _arg):
        return _otbApplication.Application_Pointer_SetDocLongDescription(self, _arg)

    def GetDocLongDescription(self):
        return _otbApplication.Application_Pointer_GetDocLongDescription(self)

    def SetDocAuthors(self, _arg):
        return _otbApplication.Application_Pointer_SetDocAuthors(self, _arg)

    def GetDocAuthors(self):
        return _otbApplication.Application_Pointer_GetDocAuthors(self)

    def SetDocLimitations(self, _arg):
        return _otbApplication.Application_Pointer_SetDocLimitations(self, _arg)

    def GetDocLimitations(self):
        return _otbApplication.Application_Pointer_GetDocLimitations(self)

    def SetDocSeeAlso(self, _arg):
        return _otbApplication.Application_Pointer_SetDocSeeAlso(self, _arg)

    def GetDocSeeAlso(self):
        return _otbApplication.Application_Pointer_GetDocSeeAlso(self)

    def SetDocTags(self, val):
        return _otbApplication.Application_Pointer_SetDocTags(self, val)

    def AddDocTag(self, tag):
        return _otbApplication.Application_Pointer_AddDocTag(self, tag)

    def GetDocTags(self):
        return _otbApplication.Application_Pointer_GetDocTags(self)

    def GetParameterList(self):
        return _otbApplication.Application_Pointer_GetParameterList(self)

    def GetNumberOfExamples(self):
        return _otbApplication.Application_Pointer_GetNumberOfExamples(self)

    def GetExampleComment(self, id):
        return _otbApplication.Application_Pointer_GetExampleComment(self, id)

    def GetExampleNumberOfParameters(self, id):
        return _otbApplication.Application_Pointer_GetExampleNumberOfParameters(self, id)

    def GetExampleParameterKey(self, exId, paramId):
        return _otbApplication.Application_Pointer_GetExampleParameterKey(self, exId, paramId)

    def GetExampleParameterValue(self, exId, paramId):
        return _otbApplication.Application_Pointer_GetExampleParameterValue(self, exId, paramId)

    def SetDocExampleParameterValue(self, key, value, exId=0):
        return _otbApplication.Application_Pointer_SetDocExampleParameterValue(self, key, value, exId)

    def SetExampleComment(self, comm, i):
        return _otbApplication.Application_Pointer_SetExampleComment(self, comm, i)

    def AddExample(self, *args):
        return _otbApplication.Application_Pointer_AddExample(self, *args)

    def GetCLExample(self):
        return _otbApplication.Application_Pointer_GetCLExample(self)

    def GetHtmlExample(self):
        return _otbApplication.Application_Pointer_GetHtmlExample(self)

    def GetOutputParametersSumUp(self):
        return _otbApplication.Application_Pointer_GetOutputParametersSumUp(self)

    def SetVectorImageFromFloatNumpyArray_(self, pkey, buffer):
        return _otbApplication.Application_Pointer_SetVectorImageFromFloatNumpyArray_(self, pkey, buffer)

    def SetVectorImageFromInt8NumpyArray_(self, pkey, buffer):
        return _otbApplication.Application_Pointer_SetVectorImageFromInt8NumpyArray_(self, pkey, buffer)

    def SetVectorImageFromInt16NumpyArray_(self, pkey, buffer):
        return _otbApplication.Application_Pointer_SetVectorImageFromInt16NumpyArray_(self, pkey, buffer)

    def SetVectorImageFromInt32NumpyArray_(self, pkey, buffer):
        return _otbApplication.Application_Pointer_SetVectorImageFromInt32NumpyArray_(self, pkey, buffer)

    def SetVectorImageFromInt64NumpyArray_(self, pkey, buffer):
        return _otbApplication.Application_Pointer_SetVectorImageFromInt64NumpyArray_(self, pkey, buffer)

    def SetVectorImageFromUInt8NumpyArray_(self, pkey, buffer):
        return _otbApplication.Application_Pointer_SetVectorImageFromUInt8NumpyArray_(self, pkey, buffer)

    def SetVectorImageFromUInt16NumpyArray_(self, pkey, buffer):
        return _otbApplication.Application_Pointer_SetVectorImageFromUInt16NumpyArray_(self, pkey, buffer)

    def SetVectorImageFromUInt32NumpyArray_(self, pkey, buffer):
        return _otbApplication.Application_Pointer_SetVectorImageFromUInt32NumpyArray_(self, pkey, buffer)

    def SetVectorImageFromUInt64NumpyArray_(self, pkey, buffer):
        return _otbApplication.Application_Pointer_SetVectorImageFromUInt64NumpyArray_(self, pkey, buffer)

    def SetVectorImageFromDoubleNumpyArray_(self, pkey, buffer):
        return _otbApplication.Application_Pointer_SetVectorImageFromDoubleNumpyArray_(self, pkey, buffer)

    def SetImageFromFloatNumpyArray_(self, pkey, buffer):
        return _otbApplication.Application_Pointer_SetImageFromFloatNumpyArray_(self, pkey, buffer)

    def SetImageFromInt8NumpyArray_(self, pkey, buffer):
        return _otbApplication.Application_Pointer_SetImageFromInt8NumpyArray_(self, pkey, buffer)

    def SetImageFromInt16NumpyArray_(self, pkey, buffer):
        return _otbApplication.Application_Pointer_SetImageFromInt16NumpyArray_(self, pkey, buffer)

    def SetImageFromInt32NumpyArray_(self, pkey, buffer):
        return _otbApplication.Application_Pointer_SetImageFromInt32NumpyArray_(self, pkey, buffer)

    def SetImageFromInt64NumpyArray_(self, pkey, buffer):
        return _otbApplication.Application_Pointer_SetImageFromInt64NumpyArray_(self, pkey, buffer)

    def SetImageFromUInt8NumpyArray_(self, pkey, buffer):
        return _otbApplication.Application_Pointer_SetImageFromUInt8NumpyArray_(self, pkey, buffer)

    def SetImageFromUInt16NumpyArray_(self, pkey, buffer):
        return _otbApplication.Application_Pointer_SetImageFromUInt16NumpyArray_(self, pkey, buffer)

    def SetImageFromUInt32NumpyArray_(self, pkey, buffer):
        return _otbApplication.Application_Pointer_SetImageFromUInt32NumpyArray_(self, pkey, buffer)

    def SetImageFromUInt64NumpyArray_(self, pkey, buffer):
        return _otbApplication.Application_Pointer_SetImageFromUInt64NumpyArray_(self, pkey, buffer)

    def SetImageFromDoubleNumpyArray_(self, pkey, buffer):
        return _otbApplication.Application_Pointer_SetImageFromDoubleNumpyArray_(self, pkey, buffer)

    def GetVectorImageAsFloatNumpyArray_(self, pkey):
        return _otbApplication.Application_Pointer_GetVectorImageAsFloatNumpyArray_(self, pkey)

    def GetVectorImageAsInt16NumpyArray_(self, pkey):
        return _otbApplication.Application_Pointer_GetVectorImageAsInt16NumpyArray_(self, pkey)

    def GetVectorImageAsInt32NumpyArray_(self, pkey):
        return _otbApplication.Application_Pointer_GetVectorImageAsInt32NumpyArray_(self, pkey)

    def GetVectorImageAsUInt8NumpyArray_(self, pkey):
        return _otbApplication.Application_Pointer_GetVectorImageAsUInt8NumpyArray_(self, pkey)

    def GetVectorImageAsUInt16NumpyArray_(self, pkey):
        return _otbApplication.Application_Pointer_GetVectorImageAsUInt16NumpyArray_(self, pkey)

    def GetVectorImageAsUInt32NumpyArray_(self, pkey):
        return _otbApplication.Application_Pointer_GetVectorImageAsUInt32NumpyArray_(self, pkey)

    def GetVectorImageAsDoubleNumpyArray_(self, pkey):
        return _otbApplication.Application_Pointer_GetVectorImageAsDoubleNumpyArray_(self, pkey)

    def New(self):
        return _otbApplication.Application_Pointer_New(self)

    def GetNameOfClass(self):
        return _otbApplication.Application_Pointer_GetNameOfClass(self)

    def AddObserver(self, event, arg1):
        return _otbApplication.Application_Pointer_AddObserver(self, event, arg1)

    def GetCommand(self, tag):
        return _otbApplication.Application_Pointer_GetCommand(self, tag)

    def InvokeEvent(self, arg0):
        return _otbApplication.Application_Pointer_InvokeEvent(self, arg0)

    def RemoveObserver(self, tag):
        return _otbApplication.Application_Pointer_RemoveObserver(self, tag)

    def RemoveAllObservers(self):
        return _otbApplication.Application_Pointer_RemoveAllObservers(self)

    def HasObserver(self, event):
        return _otbApplication.Application_Pointer_HasObserver(self, event)

    def GetMetaDataDictionary(self):
        return _otbApplication.Application_Pointer_GetMetaDataDictionary(self)

    def SetMetaDataDictionary(self, rhs):
        return _otbApplication.Application_Pointer_SetMetaDataDictionary(self, rhs)

    def Print(self, os, indent=0):
        return _otbApplication.Application_Pointer_Print(self, os, indent)

    def BreakOnError(self):
        return _otbApplication.Application_Pointer_BreakOnError(self)

    def ToString(self):
        return _otbApplication.Application_Pointer_ToString(self)
Application_Pointer_swigregister = _otbApplication.Application_Pointer_swigregister
Application_Pointer_swigregister(Application_Pointer)


import sys

class ApplicationProxy(object):
  def __init__(self, application, groupkey, value = None):
    self.__dict__["application"] = application
    self.__dict__["groupkey"] = groupkey
    if value is not None:
      self.__dict__["application"].SetParameterString(groupkey, value)

  def __str__(self):
    return self.__dict__["application"].GetParameterAsString(self.groupkey)

  def __eq__(self, other):
    if not type(other) == type(self):
      return (self.__str__() == other)
    else:
      return (isinstance(other, self.__class__) and self.__dict__ == other.__dict__)

  def __ne__(self, other):
    return not self.__eq__(other)

  def __getattr__(self,attr):
    return self.__dict__["application"].GetParameterValue( self.groupkey + "." + attr.lower() )

  def __setattr__(self,attr,value):
    if attr not in self.__dict__:
      return self.__dict__["application"].SetParameterValue( self.groupkey + "." + attr.lower(), value )
    else:
      return dict.__setattr__(self, attr, value)


class Registry(itkObject):
    __swig_setmethods__ = {}
    for _s in [itkObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Registry, name, value)
    __swig_getmethods__ = {}
    for _s in [itkObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Registry, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        GetAvailableApplications = staticmethod(_otbApplication.Registry_GetAvailableApplications)
    else:
        GetAvailableApplications = _otbApplication.Registry_GetAvailableApplications
    if _newclass:
        CreateApplication = staticmethod(_otbApplication.Registry_CreateApplication)
    else:
        CreateApplication = _otbApplication.Registry_CreateApplication
    if _newclass:
        AddApplicationPath = staticmethod(_otbApplication.Registry_AddApplicationPath)
    else:
        AddApplicationPath = _otbApplication.Registry_AddApplicationPath
    if _newclass:
        SetApplicationPath = staticmethod(_otbApplication.Registry_SetApplicationPath)
    else:
        SetApplicationPath = _otbApplication.Registry_SetApplicationPath
Registry_swigregister = _otbApplication.Registry_swigregister
Registry_swigregister(Registry)

def Registry_GetAvailableApplications():
    return _otbApplication.Registry_GetAvailableApplications()
Registry_GetAvailableApplications = _otbApplication.Registry_GetAvailableApplications

def Registry_CreateApplication(name):
    return _otbApplication.Registry_CreateApplication(name)
Registry_CreateApplication = _otbApplication.Registry_CreateApplication

def Registry_AddApplicationPath(newpath):
    return _otbApplication.Registry_AddApplicationPath(newpath)
Registry_AddApplicationPath = _otbApplication.Registry_AddApplicationPath

def Registry_SetApplicationPath(newpath):
    return _otbApplication.Registry_SetApplicationPath(newpath)
Registry_SetApplicationPath = _otbApplication.Registry_SetApplicationPath

class AddProcessToWatchEvent(itkEventObject):
    __swig_setmethods__ = {}
    for _s in [itkEventObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AddProcessToWatchEvent, name, value)
    __swig_getmethods__ = {}
    for _s in [itkEventObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AddProcessToWatchEvent, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _otbApplication.delete_AddProcessToWatchEvent
    __del__ = lambda self: None

    def GetEventName(self):
        return _otbApplication.AddProcessToWatchEvent_GetEventName(self)

    def CheckEvent(self, e):
        return _otbApplication.AddProcessToWatchEvent_CheckEvent(self, e)

    def MakeObject(self):
        return _otbApplication.AddProcessToWatchEvent_MakeObject(self)

    def __init__(self, *args):
        this = _otbApplication.new_AddProcessToWatchEvent(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetProcess(self):
        return _otbApplication.AddProcessToWatchEvent_GetProcess(self)

    def SetProcess(self, process):
        return _otbApplication.AddProcessToWatchEvent_SetProcess(self, process)

    def SetProcessDescription(self, desc):
        return _otbApplication.AddProcessToWatchEvent_SetProcessDescription(self, desc)

    def GetProcessDescription(self):
        return _otbApplication.AddProcessToWatchEvent_GetProcessDescription(self)
AddProcessToWatchEvent_swigregister = _otbApplication.AddProcessToWatchEvent_swigregister
AddProcessToWatchEvent_swigregister(AddProcessToWatchEvent)

class itkPyCommand(itkCommand):
    __swig_setmethods__ = {}
    for _s in [itkCommand]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, itkPyCommand, name, value)
    __swig_getmethods__ = {}
    for _s in [itkCommand]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, itkPyCommand, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        New = staticmethod(_otbApplication.itkPyCommand_New)
    else:
        New = _otbApplication.itkPyCommand_New

    def GetNameOfClass(self):
        return _otbApplication.itkPyCommand_GetNameOfClass(self)

    def SetCommandCallable(self, obj):
        return _otbApplication.itkPyCommand_SetCommandCallable(self, obj)

    def GetCommandCallable(self):
        return _otbApplication.itkPyCommand_GetCommandCallable(self)

    def Execute(self, arg2, arg3):
        return _otbApplication.itkPyCommand_Execute(self, arg2, arg3)
    __swig_destroy__ = _otbApplication.delete_itkPyCommand
    __del__ = lambda self: None
itkPyCommand_swigregister = _otbApplication.itkPyCommand_swigregister
itkPyCommand_swigregister(itkPyCommand)

def itkPyCommand_New():
    return _otbApplication.itkPyCommand_New()
itkPyCommand_New = _otbApplication.itkPyCommand_New

class itkPyCommand_Pointer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, itkPyCommand_Pointer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, itkPyCommand_Pointer, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _otbApplication.new_itkPyCommand_Pointer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _otbApplication.delete_itkPyCommand_Pointer
    __del__ = lambda self: None

    def __deref__(self):
        return _otbApplication.itkPyCommand_Pointer___deref__(self)

    def IsNotNull(self):
        return _otbApplication.itkPyCommand_Pointer_IsNotNull(self)

    def IsNull(self):
        return _otbApplication.itkPyCommand_Pointer_IsNull(self)

    def GetPointer(self):
        return _otbApplication.itkPyCommand_Pointer_GetPointer(self)

    def New(self):
        return _otbApplication.itkPyCommand_Pointer_New(self)

    def GetNameOfClass(self):
        return _otbApplication.itkPyCommand_Pointer_GetNameOfClass(self)

    def SetCommandCallable(self, obj):
        return _otbApplication.itkPyCommand_Pointer_SetCommandCallable(self, obj)

    def GetCommandCallable(self):
        return _otbApplication.itkPyCommand_Pointer_GetCommandCallable(self)

    def Execute(self, arg2, arg3):
        return _otbApplication.itkPyCommand_Pointer_Execute(self, arg2, arg3)

    def AddObserver(self, event, arg1):
        return _otbApplication.itkPyCommand_Pointer_AddObserver(self, event, arg1)

    def GetCommand(self, tag):
        return _otbApplication.itkPyCommand_Pointer_GetCommand(self, tag)

    def InvokeEvent(self, arg0):
        return _otbApplication.itkPyCommand_Pointer_InvokeEvent(self, arg0)

    def RemoveObserver(self, tag):
        return _otbApplication.itkPyCommand_Pointer_RemoveObserver(self, tag)

    def RemoveAllObservers(self):
        return _otbApplication.itkPyCommand_Pointer_RemoveAllObservers(self)

    def HasObserver(self, event):
        return _otbApplication.itkPyCommand_Pointer_HasObserver(self, event)

    def GetMetaDataDictionary(self):
        return _otbApplication.itkPyCommand_Pointer_GetMetaDataDictionary(self)

    def SetMetaDataDictionary(self, rhs):
        return _otbApplication.itkPyCommand_Pointer_SetMetaDataDictionary(self, rhs)

    def Print(self, os, indent=0):
        return _otbApplication.itkPyCommand_Pointer_Print(self, os, indent)

    def BreakOnError(self):
        return _otbApplication.itkPyCommand_Pointer_BreakOnError(self)

    def ToString(self):
        return _otbApplication.itkPyCommand_Pointer_ToString(self)
itkPyCommand_Pointer_swigregister = _otbApplication.itkPyCommand_Pointer_swigregister
itkPyCommand_Pointer_swigregister(itkPyCommand_Pointer)

# This file is compatible with both classic and new-style classes.


